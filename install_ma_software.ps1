new-module -name install_ma_software -scriptblock {
  Function Install-Program() {
    Param (
      [string]$Url,
      [string]$OutputName,
      [string]$ProcName,
      [string[]]$Arguments,
      [switch]$isMSI,
      [switch]$isZip,
      [switch]$noInstall,
      [string]$MoveDestination
    )
    Set-Location $env:TEMP
    Invoke-WebRequest -Uri $Url -OutFile $OutputName -UseBasicParsing
    
    if ($isMSI) { 
      $Installing = Start-Process "msiexec.exe" -ArgumentList "/a $OutputName ALLUSERS=1 /qn" -NoNewWindow -Wait
      if ($Installing.ExitCode -eq 0) { Write-Verbose "Successfully installed " + $ProcName }
    }
    else {
      if ($isZip) { Expand-Archive $OutputName -DestinationPath $ProcName }
      if (!$noInstall) { Execute-Installer -Path "$OutputName" -Arguments $Arguments }
      elseif ($MoveDestination) { 
        Move-Item -Path $ProcName -Destination $MoveDestination -Force 
        if (Test-Path "$env:Temp\$ProcName") { Remove-Item -Path "$env:Temp\$ProcName" -Recurse -Force }
      }
    }
  }

  Function Execute-Installer() {
    Param (
      [string]$Path,
      [string[]]$Arguments
    )
    if ($Arguments) { $Installing = Start-Process -FilePath "$Path" -ArgumentList $Arguments -Wait }
    else { $Installing = Start-Process -FilePath "$Path" -Wait }
    if ($Installing.ExitCode -eq 0) { 
      Write-Verbose "Successfully installed " + "$Path" 
      Remove-Item $Path
    }
  }

  Function Add-EnvironmentVariable() {
    Param (
      [string]$Value
    )
    $env:Path = "$env:Path;$Value"
    $oldpath = (Get-ItemProperty -Path "Registry::HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment" -Name PATH).path
    $newpath = "$oldpath;$Value"
    Set-ItemProperty -path "Registry::HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment" -Name PATH -Value $newPath
  }

  Function Install-JavaJDK() {
    $javajdk = "https://www.oracle.com/technetwork/java/javase/downloads/jdk12-downloads-5295953.html"
    $javaver = "12.0.1"
    $Cookie = New-Object -TypeName System.Net.Cookie
    $Cookie.Domain = 'oracle.com'
    $Cookie.Name = 'oraclelicense'
    $Cookie.Value = 'accept-securebackup-cookie'
    $Session = New-Object -TypeName Microsoft.PowerShell.Commands.WebRequestSession
    $Session.Cookies.Add($Cookie)

    $JdkUri = (Invoke-WebRequest -Uri $javajdk -WebSession $Session -UseBasicParsing).RawContent `
      -split "`n" | ForEach-Object { `
        If ($_ -imatch '"filepath":"(https://[^"]+)"') {
 `
          $Matches[1] `
              
      } `
    } | Where-Object { `
        $_ -like "*$javaver_windows-x64_bin.exe" `
    }[0];
    If ($JdkUri -imatch '/([^/]+)$') {
      $JdkFileName = $Matches[1]
    }

    Write-Host "Downloading Java..."
    Set-Location $env:TEMP
    try {
      Invoke-WebRequest -Uri $JdkUri -WebSession $Session -OutFile "jdkinstall.exe"
    }
    catch {
      $authparam_uri = $_.Exception.Response.Headers.Location.AbsoluteUri
      Invoke-WebRequest -Uri $authparam_uri -WebSession $Session -OutFile "jdkinstall.exe"
    }

    Write-Host "Installing Java..."
    if (Test-Path "$env:TEMP\jdkinstall.exe") {
      Set-Content -Path $env:TEMP\jreinstall.cfg -Value "INSTALL_SILENT=Enable`nAUTO_UPDATE=Enable`nSPONSORS=Disable`nREMOVEOUTOFDATEJRES=1"
      Execute-Installer -Path "$env:TEMP\jdkinstall.exe" -Arguments "INSTALLCFG=`"$env:TEMP\jreinstall.cfg`""
      Add-EnvironmentVariable -Value "C:\Program Files\Java\jdk-12.0.1\bin"
    }
  }

  Function Install-RESoftware() {
    param()

    Start-Transcript -Append -Path C:\Windows\Temp\setup_transcript.log
    If (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
      Write-Error "You do not have Administrator rights to run this script!`nPlease re-run this script as an Administrator!" 
      Return
    }

    If ($PSVersionTable.PSVersion.Major -lt 3) {
      Write-Error "This script must be run using Powershell version 3 or higher.  You have version $PSVersionTable.PSVersion.Major installed" 
      Return
    }

    $chrome = "http://dl.google.com/chrome/install/375.126/chrome_installer.exe"
    $die = "https://github.com/horsicq/DIE-engine/releases/download/2.03/die_win32_portable_2.03.zip"
    #$distorm3 = "https://github.com/gdabah/distorm/releases/download/v3.4.1/distorm3-3.4.1.win32-py3.6.exe"
    $getpip = "https://bootstrap.pypa.io/get-pip.py"
    $ghidra = "https://ghidra-sre.org/ghidra_9.0.2_PUBLIC_20190403.zip"
    $hxd = "https://mh-nexus.de/downloads/HxDSetup.zip"
    $ida = "https://out7.hex-rays.com/files/idafree70_windows.exe"
    $pestudio = "https://www.winitor.com/tools/pestudio/current/pestudio.zip"
    $python64 = "https://www.python.org/ftp/python/2.7.16/python-2.7.16.amd64.msi"
    #$python32 = "https://www.python.org/ftp/python/2.7.16/python-2.7.16.msi"
    $vc4python = "https://download.microsoft.com/download/7/9/6/796EF2E4-801B-4FC4-AB28-B59FBF6D907B/VCForPython27.msi"
    $volatility = "https://github.com/volatilityfoundation/volatility/archive/master.zip"
    $vscode = "https://aka.ms/win32-x64-user-stable"
    $x64dbg = "https://github.com/x64dbg/x64dbg/releases/download/snapshot/snapshot_2019-04-30_15-36.zip"
    
    Write-Host "Creating tools directory..."
    New-Item "C:\Tools" -Force -ItemType "directory"

    Write-Host "Installing Chrome..."
    Install-Program -Url $chrome -OutputName "chromeinstaller.exe" -Arguments "/silent", "/install" -ProcName "chrome"
              
    Write-Host "Installing Python"          
    Install-Program -Url $python64 -OutputName "python64installer.msi" -ProcName "python64" -isMSI
    Add-EnvironmentVariable -Value "C:\Python27;C:\Python27\Scripts;C:\Tools\volatility"

    Write-Host "Installing VC4Python"
    Install-Program -Url $vc4python -OutputName "vc4pythoninstaller.msi" -isMSI

    Write-Host "Installing PIP"
    Install-Program -Url $getpip -OutputName "get-pip.py" -noInstall
    Execute-Installer -Path python.exe -Arguments "get-pip.py"
      
    Write-Host "Installing Volatility requirements"
    Start-Process pip -ArgumentList "install", "pycrypto", "distorm3"

    Write-Host "Installing HxD (Hex Editor)"
    Install-Program -Url $hxd -OutputName "hxd.zip" -ProcName "hxd" -isZip -noInstall
    Execute-Installer -Path "hxd\HxDSetup.exe" -Arguments "/silent"
                
    Write-Host "Installing Visual Studio Code (Text Editor)"
    Install-Program -Url $vscode -OutputName "vscode.exe" -Arguments "/VERYSILENT /MERGETASKS=!runcode"
                
    Write-Host "Installing IDA Pro (Commercial RE Tool Freeware)"
    Install-Program -Url $ida -OutputName "ida.exe" -Arguments "/silent"      
                
    Write-Host "Installing Gihdra (NSA RE Tool)"
    Install-JavaJDK
    Install-Program -Url $ghidra -OutputName "ghidra.zip" -ProcName "ghidra" -isZip -noInstall -MoveDestination "C:\Tools"

    Write-Host "Installing Malware Analysis Tools..."
    Install-Program -Url $die -OutputName "die.zip" -ProcName "die" -isZip -noInstall -MoveDestination "C:\Tools"
    Install-Program -Url $pestudio -OutputName "pestudio.zip" -ProcName "pestudio" -isZip -noInstall -MoveDestination "C:\Tools"
    Install-Program -Url $volatility -OutputName "volatility.zip" -ProcName "volatility" -isZip -noInstall -MoveDestination "C:\Tools"
    Install-Program -Url $x64dbg -OutputName "x64dbg.zip" -ProcName "x64dbg" -isZip -noInstall -MoveDestination "C:\Tools"

    Remove-Item "C:\Users\Default\Desktop\EC2 Feedback.website"
    Remove-Item "C:\Users\Default\Desktop\EC2 Microsoft Windows Guide.website"
    Remove-Item "C:\Users\resadmin\Desktop\EC2 Feedback.website"
    Remove-Item "C:\Users\resadmin\Desktop\EC2 Microsoft Windows Guide.website"

    $WshShell = New-Object -ComObject WScript.Shell; $Shortcut = $WshShell.CreateShortcut("C:\Tools\HxD.lnk"); $Shortcut.TargetPath = "C:\Program Files\HxD\HxD.exe"; $Shortcut.Save()
    $WshShell = New-Object -ComObject WScript.Shell; $Shortcut = $WshShell.CreateShortcut("C:\Tools\IDA64.lnk"); $Shortcut.TargetPath = "C:\Program Files\IDA Freeware 7.0\ida64.exe"; $Shortcut.Save()
    $WshShell = New-Object -ComObject WScript.Shell; $Shortcut = $WshShell.CreateShortcut("C:\Users\Default\Desktop\Malware Analysis.lnk"); $Shortcut.TargetPath = "C:\Tools"; $Shortcut.Save()
    $WshShell = New-Object -ComObject WScript.Shell; $Shortcut = $WshShell.CreateShortcut("C:\Users\Default\Desktop\Powershell.lnk"); $Shortcut.TargetPath = "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe"; $Shortcut.Save()
    Stop-Transcript
  }
  Set-Alias install_ma_software -Value Install-RESoftware
  Export-ModuleMember -Alias 'install_ma_software' -Function 'Install-RESoftware'
}